#!/usr/bin/env bash
# spec/run-tests

set -e

# Get the project root directory
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Set up isolated test environment paths
TEST_DATA_PATH="$PROJECT_ROOT/tmp/test-nvim/data"
TEST_CONFIG_PATH="$PROJECT_ROOT/tmp/test-nvim/config"
TEST_CACHE_PATH="$PROJECT_ROOT/tmp/test-nvim/cache"
TEST_STATE_PATH="$PROJECT_ROOT/tmp/test-nvim/state"

# Create necessary directories
mkdir -p "$TEST_DATA_PATH"
mkdir -p "$TEST_CONFIG_PATH"
mkdir -p "$TEST_CACHE_PATH"
mkdir -p "$TEST_STATE_PATH"
mkdir -p "$TEST_CACHE_PATH/logs"

# Use the test init file
INIT_LUA="$PROJECT_ROOT/spec/test_init.lua"

# Set XDG environment variables to use isolated paths
export XDG_DATA_HOME="$TEST_DATA_PATH"
export XDG_CONFIG_HOME="$TEST_CONFIG_PATH"
export XDG_CACHE_HOME="$TEST_CACHE_PATH"
export XDG_STATE_HOME="$TEST_STATE_PATH"

# Ensure dependencies are installed
PLENARY_DIR="$TEST_DATA_PATH/lazy/plenary.nvim"
TELESCOPE_DIR="$TEST_DATA_PATH/lazy/telescope.nvim"

# Install dependencies if they don't exist
if [ ! -d "$PLENARY_DIR" ] || [ ! -d "$TELESCOPE_DIR" ]; then
  echo "Installing dependencies..."
  # Create a temporary init.lua file to install dependencies
  TMP_INIT="$PROJECT_ROOT/tmp/temp_init.lua"
  mkdir -p "$(dirname "$TMP_INIT")"
  
  cat > "$TMP_INIT" << 'EOF'
-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.runtimepath:prepend(lazypath)

-- Install plenary and telescope
require("lazy").setup({
  {
    "nvim-lua/plenary.nvim",
    priority = 1000,
  },
  {
    "nvim-telescope/telescope.nvim",
    priority = 900,
    dependencies = {
      "nvim-lua/plenary.nvim",
    },
  },
})
EOF

  # Run nvim with the temporary init file to install dependencies
  nvim --headless -u "$TMP_INIT" -c "Lazy! sync" -c "sleep 3000m" -c "qa!"
  echo "Dependencies installed."
fi

# Create a temporary file to capture test output
TMP_OUTPUT="$PROJECT_ROOT/tmp/unifill_test_output.txt"
mkdir -p "$(dirname "$TMP_OUTPUT")"

# Run the tests with the test_init.lua
echo "Running tests with Telescope integration..."
nvim --headless -u "$INIT_LUA" -c "PlenaryBustedDirectory spec/ { minimal_init = '$INIT_LUA' }" 2>&1 | tee "$TMP_OUTPUT"

# Define colors using tput
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
RESET=$(tput sgr0)

# Extract and tally test results
echo ""
echo ""
echo ""
echo "==== Suite Summary ===="
echo ""
SUCCESS_TOTAL=$(grep "Success:" "$TMP_OUTPUT" | cut -f2 | awk '{sum += $1} END {print sum}')
FAILED_TOTAL=$(grep "Failed :" "$TMP_OUTPUT" | cut -f2 | awk '{sum += $1} END {print sum}')
ERRORS_TOTAL=$(grep "Errors :" "$TMP_OUTPUT" | cut -f2 | awk '{sum += $1} END {print sum}')

# Set default values if empty
SUCCESS_TOTAL=${SUCCESS_TOTAL:-0}
FAILED_TOTAL=${FAILED_TOTAL:-0}
ERRORS_TOTAL=${ERRORS_TOTAL:-0}

# Print colorized summary
echo "${GREEN}Success:${RESET} $SUCCESS_TOTAL"
echo "${RED}Failed :${RESET} $FAILED_TOTAL"
echo "${RED}Errors :${RESET} $ERRORS_TOTAL"

# Clean up temporary files if needed
# Uncomment the following line if you want to clean up after tests
# rm -rf "$PROJECT_ROOT/tmp/test-nvim"

# Return non-zero exit code if there were failures or errors
if [ "$FAILED_TOTAL" -gt 0 ] || [ "$ERRORS_TOTAL" -gt 0 ]; then
  exit 1
fi